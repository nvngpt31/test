#!/bin/bash

  PATH="/root/anaconda2/bin:/usr/ucb:/usr/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin:/opt/puppet/bin"
  # SCRIPT NOTES
  #   INITIAL CHECKS
  #     . PROVIDED VARS FILE IS VALID
  #     . EACH EXPECTED VAR IS POPULATED
  #     . THE GIT DIR IS 
  #       . CLONED
  #       . ON THE RELEASE BRANCH
  #       . FRESH  


  while (( "$#" )); do
    case $1 in
      -f|--file) shift && varfile="$1"  ;;
    esac
    shift
  done

  if [[ -z $varfile ]] 
  then echo "... PLEASE PROVIDE PATH TO FILE WITH UCM REMOTE FILE SYNC DATA" 
       exit 1
  fi 

  if [[ ! -f $varfile ]] 
  then echo "... $file DOES NOT EXIST"
       exit 1
  fi 

  fn_vars_check () {
    source $varfile
    
    if [[ -z $ucm_app_git_dir ]] 
    then echo "... $ucm_app_git_dir NOT DEFINED IN $file, BAILING."
         exit 1
    fi 

    if [[ -z $ucm_target_files ]] 
    then echo "... $ucm_target_files NOT DEFINED IN $file, BAILING."
         exit 1
    fi 

    if [[ -z $ucm_target_servers ]] 
    then echo "... $ucm_target_servers NOT DEFINED IN $file, BAILING."
         exit 1
    fi 
  } 

  fn_gitstate () {
    source $varfile
    if [[ ! -d $ucm_app_git_dir ]] 
    then echo "... $ucm_app_git_dir DOES NOT EXIST OR IS NOT CLONED CORRECTLY.  CHECK THAT OUT."
         exit 1
    fi 

    cd $ucm_app_git_dir
    if [[ `tgit -b` != 'release' ]] 
    then echo "... PLEASE SWITCH TO THE RELEASE BRANCH IN GIT DIR $ucm_app_git_dir"
         exit 1
    fi 

    cd $ucm_app_git_dir
    if [[ ! -z "$(git status --porcelain)" ]]
    then echo "... PLEASE MAKE SURE YOUR GIT STATUS IS CLEAN IN $ucm_app_git_dir"
         exit 1
    fi 

    topdir="`cd $ucm_app_git_dir && git rev-parse --show-toplevel`"
    mkdir -p ${topdir}/templates/nodes
    for node in $ucm_target_servers 
    do server="`echo $node | awk -F '.' '{print $1}'`"
       mkdir -p ${topdir}/templates/nodes/${server}
       for file in $ucm_target_files 
       do pathtofile="`echo $file | awk 'BEGIN{FS=OFS="/"}{NF--; print}'`" 
          mkdir -p ${topdir}/templates/nodes/${server}${pathtofile}
       done 
    done

  }
  
  fn_syncfiles () {  
    source $varfile
    for node in $ucm_target_servers 
    do server="`echo $node | awk -F '.' '{print $1}'`"
       for file in $ucm_target_files 
       do echo ""
          pathtofile="`echo $file | awk 'BEGIN{FS=OFS="/"}{NF--; print}'`" 
          targetfile="${topdir}/templates/nodes/${server}${file}.epp"
          echo "-----------------------------------------------------------------------------------"
          # if [[ -f $targetfile ]] 
          # then echo "... SKIPPING $targetfile"
          # else echo "... SYNCING $server $file to ${topdir}/templates/nodes/${server}${pathtofile}"
               echo "... SYNCING $server $file to ${topdir}/templates/nodes/${server}${pathtofile}"
               echo "" 
               scp -o StrictHostKeyChecking=no ${server}:${file} $targetfile
               echo "" 
          # fi
       done 
    done
  }

  fn_vars_check 
  source $varfile 
  topdir="`cd $ucm_app_git_dir && git rev-parse --show-toplevel`"
  gitdir_user="`stat -c '%U' $topdir`"
  gitdir_group="`stat -c '%G' $topdir`"

  fn_gitstate
  fn_syncfiles

  echo "" 
  echo "-----------------------------------------------------------------------------------"
  echo "... CHOWNING BACK TO ORIGINAL USER"
  chown -R ${gitdir_user}.${gitdir_group} $topdir 
  echo "" 
  
