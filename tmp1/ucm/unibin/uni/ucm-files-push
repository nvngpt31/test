#!/bin/bash 

  # ----------------------------------------------------------------------------------------------------
  # potential features list
  # . maybe start the script off by removing all empty server dirs? 
  # . or write something if the scp fails them remove the server dir
  # . or scp first somewhere temp then if good mkdir then move to dest?
  
  # ----------------------------------------------------------------------------------------------------
  while (( "$#" ))
  do case $1 in
       -f|--file) shift && file="$1"   ;;
       -p|--push) shift && send='true' ;;   
     esac
     shift
  done
  
  echo "" 

  if [[ -z $file ]]
  then echo "... what remote file do you want to send? use -f or --file <absolute file path>"
       exit 1
  fi 

  # ----------------------------------------------------------------------------------------------------
  onlyrunonthisserver='prdctlsulsegw03'
  thisserver="`hostname`"
  me=`whoami`
  workdir="/home/${me}/ucm-files"
  serverdir="${workdir}/servers"
  
  # ----------------------------------------------------------------------------------------------------
  if [[ $onlyrunonthisserver != $thisserver ]]
  then echo "... whoops, we can only run this script on $onlyrunonthisserver for now.  bailing."
       exit 1
  fi  

  if [[ ! -d /home/${me} ]] 
  then echo "... whoops, sorry we can only use this script in our /home dirs for now.  doesn't look like you have one."
       exit 1
  fi 

  # ----------------------------------------------------------------------------------------------------

  # test if dir
  if [[ -d $file ]] 
  then echo "... whoops, \"$file\" is a directory."
       exit 1
  fi 
 
  # test if file even exists
  if [[ ! -f $file ]]
  then echo "... whoops, this file doesn't exist \"${file}\" "
       exit 1
  fi 

  # test validity of file path: if home
  value_home="`echo $file | cut -d'/' -f1-2`"
  if [[ $value_home != '/home' ]] 
  then echo "... whoops, file path must be from \"${serverdir}\" "  
       exit 1
  fi 

  # test validity of file path: if user's home
  value_user="`echo $file | cut -d'/' -f3-3`" 
  if [[ $me != $value_user ]] 
  then echo "... whoops, you are not allowed to send stuff from user \"${value_user}'s\" homedir. "
       exit 1
  fi 
 
  # test validity of file path: if absolute path
  value_path="`echo $file | cut -d'/' -f1-5`"
  if [[ $value_path != $serverdir ]]
  then echo "... whoops, you can only send files from your \"${serverdir}\" for now."
       exit 1
  fi   

  # send
  server="`echo $file | cut -d'/' -f6-6`"
  /usr/local/bin/simple-dns-check -s $server
  if [[ $? != '0' ]] 
  then echo "... whoops, can't find \"${server}\" in dns."
       exit 1
  fi 

  pathdelimeter="$server" 
  dest="`echo $file | awk -F "$server" '{print $NF}'`"
  destdir="`echo $dest | awk 'BEGIN{FS=OFS="/"}{NF--; print}'`"
  bkupdir="${destdir}/.ucm-backups"
  filename="`echo $dest | awk -F '/' '{print $NF}'`"
  
  echo "# ========================================================================================="
  echo "... file:     $file"
  echo "... server:   $server"
  echo "... filedest: $dest"

  if [[ -f ${file}.lastcopy ]]
  then are_diff="`diff -q ${file}.lastcopy ${file}`"
       if [[ ! -z $are_diff ]] 
       then echo "... files diff"
            echo "" 
            diff -c ${file} ${file}.lastcopy
            echo "" 
       fi 
  fi  

  echo ""
  if [[ $send = 'true' ]] 
  then sudo scp -q -o "StrictHostKeyChecking=no" -i /root/sudossh.privkey $file root@${server}:${dest}.ucmfile >/dev/null 2>&1
       echo "" 
       if [[ $? = '0' ]]
       then sendworked='true'  ; echo "... successuflly pushed file to $server"
       else sendworked='false' ; echo "... whoops, could not push file to $server"
       fi  
       
       key="StrictHostKeyChecking=no"
       priv="/root/sudossh.privkey"
       # cmds="owner="`stat -c %U $dest`" && group="`stat -c %G $dest`" && mode="0`stat -c "%a %n" $dest | awk '{print $1}'`" && chown ${owner}.${group} ${dest}.ucmfile && chmod $mode ${dest}.ucmfile"
       sudo ssh -q -o "$key" -i $priv root@${server} "mkdir -p $bkupdir ; cp -p $dest ${bkupdir}/${filename}.`date +"%A_%b_%e_%Y"_%I_%M_%S_%p` ; chown --reference=${dest} ${dest}.ucmfile ; chmod --reference=${dest} ${dest}.ucmfile ; cp ${dest}.ucmfile ${dest} ; rm -f ${dest}.ucmfile" >/dev/null 2>&1

  fi
  echo ""
  echo "# ========================================================================================="
  echo ""







