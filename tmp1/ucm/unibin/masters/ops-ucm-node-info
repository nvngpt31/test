#!/bin/bash
  source /etc/environment
  PATH=$NEWPATH


  while (( "$#" )); do
    case $1 in
      -s|--server)  shift && server="$1"    ;;
      -v|--verbose) shift && verbose="true" ;;
      -q|--quiet)   shift && quiet='true'   ;;
    esac
    shift
  done

  opts='-s -k'
  host="ucmnui.associatesys.local"
  url="https://${host}/api/v2"
  url_h="${url}/hosts"
  url_h_name="${url}/hosts/${server}"
  user='ucmadmin'
  pw='unity2018'
  h_type='Content-Type:application/json'
  h_accept='Accept:application/json'
  msg_err="resource host not found"
  dirgitparent="/home/`whoami`/ucm-git-dir"
  dir_data_nodes="${dirgitparent}/data/hieradata/nodes"
  dir_data_profiles="${dirgitparent}/profiles/templates/nodes"
  gitrepo_data='zgitlab@gitlab.associatesys.local:tools/data.git'
  gitrepo_profiles='zgitlab@gitlab.associatesys.local:td/profiles.git'
  gitrepo_smeheader="ssh://git@bitbucket.associatesys.local/sme"
  ucm_api_check="/usr/local/bin/ucm-nodecheck"


  # ---------------------------------------------------------------------------

  if [[ -z $server ]] ; then echo "PLEASE PROVIDE -s < FQDN >" ; exit 1 ; fi
  if [[ -z `echo $server | awk -F '.' '{print $2}'` ]] ; then echo "SERVER NAME MUST BE FQDN." ; exit 1 ; fi

  host $server >/dev/null 2>&1
  if [[ $? != '0' ]] ; then echo "COULD NOT RESOLVE $server, IS IT IN DNS?" ; exit 1 ; fi

  shortname="`echo $server | awk -F "." '{print $1}'`"
  
  fn_clone () {
  repo=$1 
  git clone $repo >/dev/null 2>&1
  if [[ $? != '0' ]] ; then echo "FAILED TO CLONE $repo" ; bomb_git='true' ; fi
  }

  # ---------------------------------------------------------------------------
  echo ""
  echo "CHECKING \"$server\""
  echo "THIS COULD TAKE UP TO A MINUTE."
  echo ""  
  mkdir -p $dirgitparent
  
  sh $ucm_api_check -s $server >/dev/null 2>&1
  if [[ $? = '0' ]] ; then is_ucm='true' ; else is_ucm='false' ; fi

  # ---------------------------------------------------------------------------
  if [[ $is_ucm = 'true' ]]
  then app="`ucm-nodecheck -s $server -v | grep hostgroup_name | awk '{print $NF}' | sed 's/["\,,]//g'`"

       case $app in 
         'tda_apigee')       invalid='true' ;; 
         'tda_apigeeportal') invalid='true' ;;
         'tda_springboot')   invalid='true' ;;
         'tda_tcserver')     invalid='true' ;;
         'generic')          invalid='true' ;;
         'null')             invalid='true' ;;
       esac

       if [[ $invalid = 'true' ]] 
       then echo "${server}: NO CONFIG IS BEING MANAGED FOR THIS SERVER."
            echo "${server}: PLEASE MAKE CHANGES MANUALLY OR REACH OUT TO \"! TEAM T2 SYSTEMS MANAGEMENT ENGINEERING\""
            exit 1
       fi 

       echo "${server}: IS UCM"
       echo "${server}: IS \"$app\" "
       
       if [[ ! -d ${dirgitparent}/${app} ]]
       then cd $dirgitparent
            fn_clone ${gitrepo_smeheader}/${app}.git
            if [[ $bomb_git = 'true' ]]
            then echo "BAILING." ; exit 1
            fi
       else cd ${dirgitparent}/${app}
            if [ ! -z "$(git status --porcelain)" ]
            then echo "FAILED TO CLEAN THE \"$app\"  REPO, PLEASE rm -rf ${dirgitparent}/${app} AND RE RUN THIS SCRIPT" ; exit 1
            else git pull origin `tgit -b` > /dev/null 2>&1
                 if [[ $? != '0' ]] ; then echo "FAILED TO GIT PULL \"$app\" REPO, BAILING." ; exit 1 ; fi
            fi
       fi
       if [[ -d ${dirgitparent}/${app}/templates/nodes/${shortname} ]] 
       then echo "${server}: GIT REPO IS \"${gitrepo_smeheader}/${app}.git\""
            echo "${server}: CHECK FILE TEMPLATES IN \"${app}/templates/nodes/${shortname}\""
            if [[ -f ${dirgitparent}/${app}/data/global.yaml ]] 
            then echo "${server}: MANAGING THESE DEFAULT FILES IN \"${app}/data/global.yaml\""
                 echo "" 
                 egrep -v '(#|ensure|owner|group)' ${dirgitparent}/${app}/data/global.yaml
                 echo "" 
            else echo "DID NOT FIND A GLOBAL.YAML FOR \"${app}\""
            fi 
           
       else echo "${server}: NO FILES HAVE BEEN ADDED TO REPO \"${gitrepo_smeheader}/${app}.git\" FOR THIS SERVER"
            exit 0
       fi 
  fi


  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  if [[ $is_ucm = 'false' ]]
  then echo "${server}: IS NOT UCM. IS LEGACY PUPPET." 
       if [[ ! -d ${dirgitparent}/data ]]
       then cd $dirgitparent
            fn_clone $gitrepo_data
            if [[ $bomb_git = 'true' ]]
            then echo "BAILING." ; exit 1
            fi
       fi

       if [[ -d ${dirgitparent}/data ]]
       then cd ${dirgitparent}/data
            if [ ! -z "$(git status --porcelain)" ] ; then git checkout -- . ; fi

            if [ ! -z "$(git status --porcelain)" ]
            then echo "FAILED TO CLEAN THE DATA REPO, PLEASE rm -rf ${dirgitparent}/data AND RE RUN THIS SCRIPT"
                 exit 1
            else git pull origin `tgit -b` > /dev/null 2>&1
                 if [[ $? != '0' ]] 
                 then echo "FAILED TO GIT PULL DATA REPO, BAILING." 
                      echo "PLEASE rm -rf ${dirgitparent}/data AND RE RUN THIS SCRIPT"
                      exit 1 
                 fi
            fi

       fi

       if [[ -f ${dirgitparent}/data/hieradata/nodes/${shortname}.yaml ]] 
       then echo ""
            echo "MANAGING THESE TEMPLATES:"
            echo "  IN FILE \"data/hieradata/nodes/${shortname}.yaml\" "
            echo "" 
            grep template_path ${dirgitparent}/data/hieradata/nodes/${shortname}.yaml
            # egrep -v '(#|ensure|owner|group)' ${dirgitparent}/data/hieradata/nodes/${shortname}.yaml
            echo "" 
       else echo "${server}: CONFIG DATA NOT AVAILABLE.  PLEASE EMAIL \"!TEAM T2 SYSTEMS MANAGEMENT ENGINEERING\" FOR ASSISTANCE."
       fi 

  fn_hold () {
       if [[ ! -d ${dirgitparent}/profiles ]]
       then echo "CLONING THE PROFILES REPO TO CHECK FOR SERVER \"$server\""
            cd $dirgitparent
            fn_clone $gitrepo_profiles
            if [[ $bomb_git = 'true' ]]
            then echo "BAILING." ; exit 1
            fi
       fi


       if [[ -d ${dirgitparent}/profiles ]]
       then cd ${dirgitparent}/profiles
            if [ ! -z "$(git status --porcelain)" ] ; then git checkout -- . ; fi

            if [ ! -z "$(git status --porcelain)" ]
            then echo "FAILED TO CLEAN THE PROFILES REPO, PLEASE rm -rf ${dirgitparent}/profiles AND RE RUN THIS SCRIPT"
                 exit 1
            else git pull origin `tgit -b` > /dev/null 2>&1
                 if [[ $? != '0' ]] ; then echo "FAILED TO GIT PULL PROFILES REPO, BAILING." ; exit 1 ; fi
            fi

       fi
   }

   fi
  echo "---------------------------------------------------------------------------------------"
  # ---------------------------------------------------------------------------


