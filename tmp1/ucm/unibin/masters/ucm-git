#!/bin/bash

  source /etc/environment
  PATH=$NEWPATH

  mod=$1 branch=$2 url=$3                      databranch=$4 environment=$5
  envdir='/etc/puppetlabs/puppet/environments' thisenv="${envdir}/${environment}"
  hradir='/etc/puppetlabs/puppet/hiera'        hraenv="${hradir}/${environment}"
  moddir="${thisenv}/modules"                  module="${moddir}/${mod}"

  fmt () {
    echo ''
  }

  fmttop () {
    echo '========================================================================'
  }

  cleanstatus () {
    git checkout -- . >/dev/null 2>&1
  }

  gofetch () {
    git fetch -a >/dev/null 2>&1 
  }

  switchbranch () {
    branch=$1
    git checkout $branch >/dev/null 2>&1 
    if [[ $? == '0' ]] 
    then echo "true"
    else echo "fail"
    fi 
  }

   gitpull () {
    git pull origin `tgit -b` >/dev/null 2>&1
    if [[ $? == '0' ]]
    then echo "true"
    else echo "fail"
    fi
  }

  clone () {
    # MUST CD TO THE DIRECTORY TO WHERE WE WANT TO CLONE
    url=$1 branch=$2 mod=$3
    git clone -b $branch $url >/dev/null 2>&1                           # 1.) CLONE THE REPO 

    if [[ ! -d $mod ]]                                                  # 2.) CHECK IF DIR EXISTS AFTER CLONE
    then echo "... FAILED TO CLONE MOD: \"$mod\" IN ENVIRONMENT: \"$environment\" "
    else modclone=true
    fi 
 
    if [[ $modclone == 'true' ]]                                        # AT THIS POINT, WE WORK IN THE NEWLY CLONED DIR
    then cd $mod ; git rev-parse --git-dir >/dev/null 2>&1              # 3.) CHECK IF ACTUAL GIT DIR

         if [[ $? != 0 ]]
         then echo "... MOD $mod DOES NOT APPEAR TO BE A GIT DIRECTORY"  
         else modisgitdir='true'
         fi 
    fi 

    if [[ $modisgitdir == 'true' ]] 
    then 
      if [[ `tgit -r` != "$url" ]]                                      # 4.) CHECK IF URL'S MATCH
      then echo "... URL FOR MOD $mod DOES NOT LOOK CORRECT"
      else modurlisgood='true'
      fi 
    fi

    if [[ $modurlisgood == 'true' ]]
    then 
      if [[ `tgit -b` != "$branch" ]]                                   # 5.) CHECK IF BRANCHES MATCH
      then echo "... CURRENT BRANCH FOR $mod DOES NOT APPEAR CORRECT"
      else modbranchisgood='true'
      fi 
    fi 
  }

  pullmod () {
    path=$1 url=$2 branch=$3 mod=$4
    cd $path

    git rev-parse --git-dir >/dev/null 2>&1                             # 1.) CHECK IF ACTUAL GIT DIR
    if [[ $? != 0 ]]
    then echo "... MOD $mod DOES NOT APPEAR TO BE A GIT DIRECTORY"
    else modisgitdir='true'
    fi

    if [[ $modisgitdir == 'true' ]]
    then
      if [[ `tgit -r` != "$url" ]]                                      # 2.) CHECK IF URL'S MATCH
      then echo "... URL FOR MOD $mod DOES NOT LOOK CORRECT"
      else modurlisgood='true'
      fi
    fi

    if [[ $modurlisgood == 'true' ]] 
    then
      if [[ `tgit -b` != "$branch" ]]                                   # 3.) CHECK IF BRANCHES MATCH, SWITCH IF FALSE
      then branches_didnt_match='true' 
           cleanstatus                                                  
           gofetch
          
           if [[ `switchbranch $branch` != 'true' ]] 
           then echo "... FAILED SWITCHING TO BRANCH: \"$branch\" "
                proceed='false'
           else proceed='true'
           fi 
      else branches_didnt_match='false'                                 # AS IN THEY DID MATCH, SO NO NEED TO SWITCH
           proceed=true
      fi
    else echo "... BAILING"
         proceed=false
    fi

    if [[ $proceed == 'true' ]] 
    then 
      if [[ `gitpull` == 'true' ]] 
      then echo "... PULLED MOD: \"$mod\" "
           echo "... BRANCH: \"`tgit -b`\" "
           echo "... REVISION: \"...`tgit -rv | tail -c 5`\" "
      else echo "... FAILED TO PULL LATEST REVISION OF MOD: \"$mod\" "
      fi 
    fi 
  }
  
  # =====================================================================
  # mod=$1 branch=$2 url=$3                      databranch=$4 environment=$5
  # envdir='/etc/puppetlabs/puppet/environments' thisenv="${envdir}/${environment}"
  # hradir='/etc/puppetlabs/puppet/hiera'        hraenv="${hradir}/${environment}"
  # moddir="${thisenv}/modules"                  module="${moddir}/${mod}"

  # CHECK ENV
  fmt ; if [[ ! -d $thisenv ]] ; then mkdir -p ${moddir} ; fi 

  if [[ ! -d $module ]] 
  then echo "... CLONING REPO FOR MOD: \"$mod\" "
       cd $moddir 
       clone $url $branch $mod
  else pullmod $module $url $branch $mod  
  fi 

  
