#!/bin/bash

  # THIS IS NEEDED BY APACHE WHEN RUNNING THIS SCRIPT VIA CGI
  source /etc/environment
  PATH=$NEWPATH

  env=$1
  if [[ -z $env ]]
  then echo "...please provide env"
       exit 1
  fi

  factsdir='/etc/puppetlabs/facter/facts.d'
  prdir="/app/puppet_repository"
  hieradir="/root/hiera.prod/hieradata/"
  mkfact () {
    fact=$1 val=$2
    echo "${fact}=${val}" > ${factsdir}/${fact}.txt
  }

  refresh () {
    git checkout -- . >/dev/null 2>&1
    git fetch -a      >/dev/null 2>&1
  }

  switchb () {
    branch=$1
    git checkout $branch >/dev/null 2>&1
    if [[ $? == '0' ]]
    then echo "true"
    else echo "false"
    fi
  }

  pullproject () {
    git pull origin `tgit -b` >/dev/null 2>&1
    if [[ $? == '0' ]]
    then echo "true"
    else echo "false"
    fi
  }

  branchexists () {
    checkbranch=$1
    if git branch -a | sed 's/remotes\/origin\///g' | grep -q $checkbranch
    then echo "true"
    else echo "false"
    fi
  }

  reclone () {
    parent='/app' repodir="${parent}/puppet_repository" url="zgitlab@gitlab.associatesys.local:ulse/puppet_repository.git"
    rm -rf $repodir
    cd $parent
    git clone $url >/dev/null 2>&1
    if [[ $? != '0' ]]
    then echo "fail"
    else echo "pass"
    fi
  }

  # ---------------------------------------------------------------------------

  if [[ ! -f /app/ucm.lock ]] ; then
    touch /app/ucm.lock

    if [[ ! -d $prdir ]]
    then echo "... PLEASE CLONE PUPPET REPOSITORY DIR IN /APP"
	 rm -f /app/ucm.lock 
         exit 1
    fi

    cd $prdir
    refresh

    # SWITCH TO ENV BRANCH, IF FAILS PROCEED TO REMEDIATE
    if [[ `switchb $env` != 'true' ]]
    then echo "... FAILED TO CHECKOUT BRANCH ${env}.  ATTEMPTING TO REMEDIATE."

    # IF FAILED, CHECK IF BRANCH EXISTS
      if [[ `branchexists $env` == 'false' ]]
      then echo "... DOESN'T APPEAR BRANCH $env EXISTS, BAILING." 
           rm -f /app/ucm.lock
           exit 1
      fi

    # RECLONE IF OTHER TYPE OF ERROR
      if [[ `reclone` == 'fail' ]]
      then echo "... COULDN'T CLONE PUPPET REPOSITORY REPO, BAILING." 
           rm -f /app/ucm.lock
           exit 1
      else echo "... RECLONED SUCCESSFULLY, PROCEEDING"
      fi
    fi

    if [[ `pullproject` != 'true' ]]
    then echo "... FAILED TO REFRESH PUPPET REPOSITORY PROJECT"
         rm -f /app/ucm.lock
         exit 1
    fi

    if [[ ! -f ${prdir}/puppetfile.yaml ]]
    then echo "... CANNOT FIND \"puppetfile.yaml\" FOR ENV: \"$env\" "
         rm -f /app/ucm.lock
         exit 1
    fi

    cp ${prdir}/puppetfile.yaml ${hieradir}/${env}.yaml
    mkfact deployenv $env
    mpath='/etc/puppetlabs/puppet/environments/production/modules'
    puppet apply --modulepath=${mpath} -e 'include local' # >/dev/null 2>&1

    cat /tmp/puppet-git-deploy-for* > /tmp/env-${env}-modules.txt
    rm -f /tmp/puppet-git-deploy-for*
    rm -f /app/ucm.lock
  fi

