#!/bin/bash

  source /etc/environment
  PATH=$NEWPATH

  url=$1                      
  branch=$2 
  environment=production
  codedir="/etc/puppetlabs/code"
  envdir='/etc/puppetlabs/code/environments'   
  thisenv="${envdir}/${environment}"
  moddir="${thisenv}/modules"                  
  module="${moddir}/${mod}"
  lockreperm='/tmp/ucm-reperm.lock'

  puppet_perm () {
    dir=$1
    touch $lockreperm
    owner="`stat -c '%U' $dir`"
    if [[ $owner != 'puppet' ]] 
    then echo "... CHOWNING DIR"
	 chown -R puppet.puppet $dir 
         chmod -R 0775 $dir
    else echo "... PERMS ARE GOOD"
    fi 
    rm -f $lockreperm
  }

  reperm () {
    chowndir=$1
    if [[ -f $lockreperm ]] 
    then while [[ -f $lockreperm ]] ; do 
         sleep .5 >/dev/null 2>&1
         done 
    fi 
   
    puppet_perm $chowndir
  } 

  refresh () {
    echo "... REFRESHING GIT"
    git checkout -- . >/dev/null 2>&1
    git fetch -a >/dev/null 2>&1 
  }

  rev () {
    tgit -rv | tail -c 5 
  }

  switchbranch () {
    echo "... SWITCHING BRANCH"
    branch=$1
    git checkout $branch >/dev/null 2>&1 
    if [[ $? == '0' ]] 
    then echo "true"
    else echo "fail"
    fi 
  }

   gitpull () {
    git pull origin `tgit -b` >/dev/null 2>&1
    if [[ $? == '0' ]]
    then echo "true"
    else echo "fail"
    fi
  }

  branchexists () {
    checkbranch=$1
    if git branch -a | sed 's/remotes\/origin\///g' | grep -q $checkbranch
    then echo "true"
    else echo "false"
    fi
  }
  
  getgitdir () {
    url_check=$1
    for mod in `ls -1 $moddir` ; do
      cd ${moddir}/${mod}
      current_url="`tgit -r`" 
      currentdir="`pwd`"
      if [[ $current_url = $url_check ]] 
      then breakloop='true' 
           workdir="$currentdir"
           gitdirfound='true'
      fi 
      
      if [[ $breakloop = 'true' ]] 
      then break                                 
      fi
    done
    
    if [[ $gitdirfound != 'true' ]] 
    then workdir=null
         echo "... THAT URL DOES NOT APPEAR TO BE CLONED ANYWHERE"
    fi 
  }
  
  clone () {
    url=$1 branch=$2
    cd ${moddir}
    git clone -b $branch $url >/dev/null 2>&1
    if [[ $? != '0' ]] 
    then echo "... FAILED TO CLONE GIT REPO"
         rm -f /tmp/ucm-deploy-main.lock
         exit 1
    else echo "... CLONED REPO WITH URL $url "
    fi 
  }

  pull () {
    desiredbranch=$1

    if [[ -z $desiredbranch ]] ; then echo "... PLEASE PROVIDE BRANCH TO CHECK/PULL" ; rm -f /tmp/ucm-deploy-main.lock ; exit 1 ; fi  
    echo "... ATTEMPTING TO PULL $desiredbranch"

    if [[ `branchexists $desiredbranch` != 'true' ]] 
    then echo "... COULDN'T FIND REQUESTED BRANCH"
         rm -f /tmp/ucm-deploy-main.lock
         exit 1
    else echo "... BRANCH $desiredbranch EXISTS"
    fi 

    if [[ `tgit -b` = $desiredbranch ]]
    then branchmatch='true'
    else branchmatch='false'
    fi 

    echo "... BRANCHMATCH VAR branchmatch = $branchmatch " 

    if [[ $branchmatch == 'false' ]] 
    then echo "... ATTEMPTING TO SWITCH TO BRANCH $desiredbranch "
	 git checkout $desiredbranch >/dev/null 2>&1
	 if [[ $? = '0' ]] 
         then echo "... SUCCESSFULLY SWITCHED BRANCHES"
              if [[ `gitpull` = 'true' ]] 
              then echo "... SUCCESSFULLY PULLED BRANCH"
                   echo "... CURRENT BRANCH:   `tgit -b`"
                   echo "... CURRENT REVISION: `rev`"
              else echo "... FAILED TO PULL BRANCH $desiredbranch" ; rm -f /tmp/ucm-deploy-main.lock ; exit 1
              fi
	 else echo "... FAILED TO SWITCH TO BRANCH $desiredbranch" ; rm -f /tmp/ucm-deploy-main.lock ; exit 1 
         fi
    fi 

    if [[ $branchmatch == 'true' ]] 
    then echo "... BRANCHES MATCH"
         if [[ `gitpull` != 'true' ]]
         then echo "... FAILED TO PULL BRANCH"
         else echo "... SUCCESSFULLY PULLED BRANCH"
              echo "... CURRENT BRANCH:   `tgit -b`"
              echo "... CURRENT REVISION: `rev`"
         fi
    fi
  }

  fn_ucmgitmain () {
    # LEFT OFF HERE 
    # WAS GONNA SETUP RE PERMING HERE FOR CLONE RE PERM CODE DIR RECURSIVELY
    getgitdir $url
    echo "... WORKD DIR IS: $workdir "

    if [[ $workdir = 'null' ]] 
    then echo "... ATTEMPTING TO CLONE NOW"
         clone $url $branch
         chown -R puppet.puppet $moddir
         chmod -R 0775 $moddir
    fi 

    if [[ $workdir != 'null' ]] ; then 
      cd $workdir
      refresh 
      pull $branch
      chown -R puppet.puppet $moddir
      chmod -R 0775 $moddir
    fi
  }

  rm -f /tmp/ucm-deploy-main.txt 
  fn_ucmgitmain | tee /tmp/ucm-deploy-main.txt 
  chmod 0775 /tmp/ucm-deploy-main.txt
    
      

